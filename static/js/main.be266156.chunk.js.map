{"version":3,"sources":["utils/login.js","pages/login/index.js","pages/academyList/index.js","App.js","serviceWorker.js","index.js"],"names":["checkAccountValidation","account","test","checkPasswordValidation","password","App","state","accountInvalid","passwordInvalid","validated","handleSubmit","event","_this$form","_this","form","value","setState","preventDefault","_this2","this","_this$state","react_default","a","createElement","className","Form","ref","onSubmit","e","Group","controlId","Label","Control","type","name","isInvalid","placeholder","required","Feedback","Text","Button","variant","Component","react_router_dom","react_router","path","exact","component","Login","List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAAaA,EAAyB,SAACC,GACrC,GAAuB,kBAAZA,EAAsB,OAAO,EAGxC,QADU,8BACFC,KAAKD,IAOFE,EAA0B,SAACC,GACtC,GAAwB,kBAAbA,EAAuB,OAAO,EAGzC,QADU,mEACFF,KAAKE,ICqEAC,oNA7EbC,MAAQ,CACNC,gBAAgB,EAChBC,iBAAiB,EACjBC,WAAW,KAGbC,aAAe,SAACC,GAAU,IAAAC,EACMC,EAAKC,KAA3Bb,EADgBW,EAChBX,QAASG,EADOQ,EACPR,SACZJ,EAAuBC,EAAQc,QAAWZ,EAAwBC,EAASW,OAO9EF,EAAKG,SAAS,CAAEP,WAAW,KAN3BE,EAAMM,iBACNJ,EAAKG,SAAS,CACZT,gBAAgB,EAChBC,iBAAiB,8EAOd,IAAAU,EAAAC,KAAAC,EACgDD,KAAKb,MAApDC,EADDa,EACCb,eAAgBC,EADjBY,EACiBZ,gBAAiBC,EADlCW,EACkCX,UAEzC,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,+DAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,IAAK,SAAAZ,GAAI,OAAII,EAAKJ,KAAOA,GACzBL,UAAWA,EACXkB,SAAU,SAAAC,GAAC,OAAIV,EAAKR,aAAakB,KAEjCP,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CAAYC,UAAU,oBACpBT,EAAAC,EAAAC,cAACE,EAAA,EAAKM,MAAN,gBACAV,EAAAC,EAAAC,cAACE,EAAA,EAAKO,QAAN,CACEC,KAAK,OACLC,KAAK,UACLC,UAAW5B,EACX6B,YAAY,gBACZC,UAAQ,IAEVhB,EAAAC,EAAAC,cAACE,EAAA,EAAKO,QAAQM,SAAd,CAAuBL,KAAK,WAA5B,gCAGAZ,EAAAC,EAAAC,cAACE,EAAA,EAAKc,KAAN,CAAWf,UAAU,cAArB,0DAKFH,EAAAC,EAAAC,cAACE,EAAA,EAAKI,MAAN,CAAYC,UAAU,qBACpBT,EAAAC,EAAAC,cAACE,EAAA,EAAKM,MAAN,iBACAV,EAAAC,EAAAC,cAACE,EAAA,EAAKO,QAAN,CACEC,KAAK,WACLC,KAAK,WACLC,UAAW3B,EACX4B,YAAY,iBACZC,UAAQ,IAEVhB,EAAAC,EAAAC,cAACE,EAAA,EAAKO,QAAQM,SAAd,CAAuBL,KAAK,WAA5B,gCAGAZ,EAAAC,EAAAC,cAACE,EAAA,EAAKc,KAAN,CAAWf,UAAU,cAArB,uEAKFH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,QAAQ,UAAUR,KAAK,UAA/B,mBApEMS,cCMHrC,mLARX,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBAJUmB,aCgBHrC,0LATX,OACEgB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC3B,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,QAAQC,OAAK,EAACC,UAAWE,YAL3BP,cCKEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.be266156.chunk.js","sourcesContent":["export const checkAccountValidation = (account) => {\n  if (typeof account !== 'string') return false\n\n  var reg = /^[a-zA-Z][a-zA-Z0-9]{2,20}$/;\n  if (reg.test(account)) {\n    return true\n  } else {\n    return false\n  }\n}\n\nexport const checkPasswordValidation = (password) => {\n  if (typeof password !== 'string') return false\n\n  var reg = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[!@#$%^&*,.?])[\\w!@#$%^&*,.?]{8,20}$/;\n  if (reg.test(password)) {\n    return true\n  } else {\n    return false\n  }\n}","import React, { Component } from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nimport { checkAccountValidation, checkPasswordValidation } from '../../utils/login'\nimport './index.css';\n\nclass App extends Component {\n  state = {\n    accountInvalid: false,\n    passwordInvalid: false,\n    validated: false\n  }\n\n  handleSubmit = (event) => {\n    const { account, password } = this.form\n    if (!checkAccountValidation(account.value) || !checkPasswordValidation(password.value)) {\n      event.preventDefault()\n      this.setState({\n        accountInvalid: true,\n        passwordInvalid: true,\n      })\n    } else {\n      this.setState({ validated: true });\n    }\n  }\n\n  render() {\n    const { accountInvalid, passwordInvalid, validated } = this.state\n\n    return (\n      <div className=\"login-container\">\n        <div className=\"login-title\">\n          <h1>思沃学院在线学习</h1>\n        </div>\n        <div className=\"form-wrapper\">\n          <Form\n            ref={form => this.form = form}\n            validated={validated}\n            onSubmit={e => this.handleSubmit(e)}\n          >\n            <Form.Group controlId=\"formBasicAccount\">\n              <Form.Label>Account</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"account\"\n                isInvalid={accountInvalid}\n                placeholder=\"Enter Account\"\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Invalid username or password\n              </Form.Control.Feedback>\n              <Form.Text className=\"text-muted\">\n                账号为2-20位英文,数字\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                name=\"password\"\n                isInvalid={passwordInvalid}\n                placeholder=\"Enter Password\"\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Invalid username or password\n              </Form.Control.Feedback>\n              <Form.Text className=\"text-muted\">\n                账号为8-20位英文,数字,标点\n              </Form.Text>\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Login\n            </Button>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <p>list</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Login from './pages/login'\nimport List from './pages/academyList'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact component={Login}/>\n        <Route path=\"/list\" exact component={List}/>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}